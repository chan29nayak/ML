{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Importing Libraries\n",
    "import pandas as pd\n",
    "\n",
    "# For Visualisation\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "\n",
    "# To Scale our data\n",
    "from sklearn.preprocessing import scale\n",
    "\n",
    "# To perform KMeans clustering \n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "# To perform Hierarchical clustering\n",
    "from scipy.cluster.hierarchy import linkage\n",
    "from scipy.cluster.hierarchy import dendrogram\n",
    "from scipy.cluster.hierarchy import cut_tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#reading Dataset\n",
    "retail = pd.read_csv(\"Online+Retail.csv\",  sep = ',',encoding = \"ISO-8859-1\", header= 0)\n",
    "\n",
    "# parse date\n",
    "retail['InvoiceDate'] = pd.to_datetime(retail['InvoiceDate'], format = \"%d-%m-%Y %H:%M\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>InvoiceNo</th>\n",
       "      <th>StockCode</th>\n",
       "      <th>Description</th>\n",
       "      <th>Quantity</th>\n",
       "      <th>InvoiceDate</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>536365</td>\n",
       "      <td>85123A</td>\n",
       "      <td>WHITE HANGING HEART T-LIGHT HOLDER</td>\n",
       "      <td>6</td>\n",
       "      <td>2010-12-01 08:26:00</td>\n",
       "      <td>2.55</td>\n",
       "      <td>17850.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>536365</td>\n",
       "      <td>71053</td>\n",
       "      <td>WHITE METAL LANTERN</td>\n",
       "      <td>6</td>\n",
       "      <td>2010-12-01 08:26:00</td>\n",
       "      <td>3.39</td>\n",
       "      <td>17850.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>536365</td>\n",
       "      <td>84406B</td>\n",
       "      <td>CREAM CUPID HEARTS COAT HANGER</td>\n",
       "      <td>8</td>\n",
       "      <td>2010-12-01 08:26:00</td>\n",
       "      <td>2.75</td>\n",
       "      <td>17850.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>536365</td>\n",
       "      <td>84029G</td>\n",
       "      <td>KNITTED UNION FLAG HOT WATER BOTTLE</td>\n",
       "      <td>6</td>\n",
       "      <td>2010-12-01 08:26:00</td>\n",
       "      <td>3.39</td>\n",
       "      <td>17850.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>536365</td>\n",
       "      <td>84029E</td>\n",
       "      <td>RED WOOLLY HOTTIE WHITE HEART.</td>\n",
       "      <td>6</td>\n",
       "      <td>2010-12-01 08:26:00</td>\n",
       "      <td>3.39</td>\n",
       "      <td>17850.0</td>\n",
       "      <td>United Kingdom</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  InvoiceNo StockCode                          Description  Quantity  \\\n",
       "0    536365    85123A   WHITE HANGING HEART T-LIGHT HOLDER         6   \n",
       "1    536365     71053                  WHITE METAL LANTERN         6   \n",
       "2    536365    84406B       CREAM CUPID HEARTS COAT HANGER         8   \n",
       "3    536365    84029G  KNITTED UNION FLAG HOT WATER BOTTLE         6   \n",
       "4    536365    84029E       RED WOOLLY HOTTIE WHITE HEART.         6   \n",
       "\n",
       "          InvoiceDate  UnitPrice  CustomerID         Country  \n",
       "0 2010-12-01 08:26:00       2.55     17850.0  United Kingdom  \n",
       "1 2010-12-01 08:26:00       3.39     17850.0  United Kingdom  \n",
       "2 2010-12-01 08:26:00       2.75     17850.0  United Kingdom  \n",
       "3 2010-12-01 08:26:00       3.39     17850.0  United Kingdom  \n",
       "4 2010-12-01 08:26:00       3.39     17850.0  United Kingdom  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "retail.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(541909, 8)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "retail.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 541909 entries, 0 to 541908\n",
      "Data columns (total 8 columns):\n",
      "InvoiceNo      541909 non-null object\n",
      "StockCode      541909 non-null object\n",
      "Description    540455 non-null object\n",
      "Quantity       541909 non-null int64\n",
      "InvoiceDate    541909 non-null datetime64[ns]\n",
      "UnitPrice      541909 non-null float64\n",
      "CustomerID     406829 non-null float64\n",
      "Country        541909 non-null object\n",
      "dtypes: datetime64[ns](1), float64(2), int64(1), object(4)\n",
      "memory usage: 33.1+ MB\n"
     ]
    }
   ],
   "source": [
    "retail.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Quantity</th>\n",
       "      <th>UnitPrice</th>\n",
       "      <th>CustomerID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>541909.000000</td>\n",
       "      <td>541909.000000</td>\n",
       "      <td>406829.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>9.552250</td>\n",
       "      <td>4.611114</td>\n",
       "      <td>15287.690570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>218.081158</td>\n",
       "      <td>96.759853</td>\n",
       "      <td>1713.600303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-80995.000000</td>\n",
       "      <td>-11062.060000</td>\n",
       "      <td>12346.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.250000</td>\n",
       "      <td>13953.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>2.080000</td>\n",
       "      <td>15152.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>10.000000</td>\n",
       "      <td>4.130000</td>\n",
       "      <td>16791.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>80995.000000</td>\n",
       "      <td>38970.000000</td>\n",
       "      <td>18287.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Quantity      UnitPrice     CustomerID\n",
       "count  541909.000000  541909.000000  406829.000000\n",
       "mean        9.552250       4.611114   15287.690570\n",
       "std       218.081158      96.759853    1713.600303\n",
       "min    -80995.000000  -11062.060000   12346.000000\n",
       "25%         1.000000       1.250000   13953.000000\n",
       "50%         3.000000       2.080000   15152.000000\n",
       "75%        10.000000       4.130000   16791.000000\n",
       "max     80995.000000   38970.000000   18287.000000"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "retail.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "InvoiceNo           0\n",
       "StockCode           0\n",
       "Description      1454\n",
       "Quantity            0\n",
       "InvoiceDate         0\n",
       "UnitPrice           0\n",
       "CustomerID     135080\n",
       "Country             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "retail.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "136534"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "retail.isnull().values.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "InvoiceNo       0.00\n",
       "StockCode       0.00\n",
       "Description     0.27\n",
       "Quantity        0.00\n",
       "InvoiceDate     0.00\n",
       "UnitPrice       0.00\n",
       "CustomerID     24.93\n",
       "Country         0.00\n",
       "dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "round(100*(retail.isnull().sum())/len(retail.index),2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "new_retail = retail.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "InvoiceNo      0\n",
       "StockCode      0\n",
       "Description    0\n",
       "Quantity       0\n",
       "InvoiceDate    0\n",
       "UnitPrice      0\n",
       "CustomerID     0\n",
       "Country        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_retail.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(406829, 8)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_retail.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>15.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>22.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>20.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>20.34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Amount\n",
       "0   15.30\n",
       "1   20.34\n",
       "2   22.00\n",
       "3   20.34\n",
       "4   20.34"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "amount  = pd.DataFrame(new_retail.Quantity * new_retail.UnitPrice, columns = [\"Amount\"])\n",
    "amount.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>4310.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>1797.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>1757.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>334.40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CustomerID   Amount\n",
       "0     12346.0     0.00\n",
       "1     12347.0  4310.00\n",
       "2     12348.0  1797.24\n",
       "3     12349.0  1757.55\n",
       "4     12350.0   334.40"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#merging amount in order_wise\n",
    "new_retail = pd.concat(objs = [new_retail, amount], axis = 1, ignore_index = False)\n",
    "\n",
    "#Monetary Function\n",
    "# Finding total amount spent per customer\n",
    "monetary = new_retail.groupby(\"CustomerID\").Amount.sum()\n",
    "monetary = monetary.reset_index()\n",
    "monetary.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "frequency = new_retail[['CustomerID', 'InvoiceNo']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CustomerID  Frequency\n",
       "0     12346.0          2\n",
       "1     12347.0        182\n",
       "2     12348.0         31\n",
       "3     12349.0         73\n",
       "4     12350.0         17"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting the count of orders made by each customer based on customer ID.\n",
    "k = frequency.groupby(\"CustomerID\").InvoiceNo.count()\n",
    "k = pd.DataFrame(k)\n",
    "k = k.reset_index()\n",
    "k.columns = [\"CustomerID\", \"Frequency\"]\n",
    "k.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Frequency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>4310.00</td>\n",
       "      <td>182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>1797.24</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>1757.55</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>334.40</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CustomerID   Amount  Frequency\n",
       "0     12346.0     0.00          2\n",
       "1     12347.0  4310.00        182\n",
       "2     12348.0  1797.24         31\n",
       "3     12349.0  1757.55         73\n",
       "4     12350.0   334.40         17"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#creating master dataset\n",
    "master = monetary.merge(k, on = \"CustomerID\", how = \"inner\")\n",
    "master.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "recency  = new_retail[['CustomerID','InvoiceDate']]\n",
    "maximum = max(recency.InvoiceDate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/dell/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  # This is added back by InteractiveShellApp.init_path()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>InvoiceDate</th>\n",
       "      <th>diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17850.0</td>\n",
       "      <td>2010-12-01 08:26:00</td>\n",
       "      <td>374 days 04:24:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>17850.0</td>\n",
       "      <td>2010-12-01 08:26:00</td>\n",
       "      <td>374 days 04:24:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17850.0</td>\n",
       "      <td>2010-12-01 08:26:00</td>\n",
       "      <td>374 days 04:24:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>17850.0</td>\n",
       "      <td>2010-12-01 08:26:00</td>\n",
       "      <td>374 days 04:24:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>17850.0</td>\n",
       "      <td>2010-12-01 08:26:00</td>\n",
       "      <td>374 days 04:24:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CustomerID         InvoiceDate              diff\n",
       "0     17850.0 2010-12-01 08:26:00 374 days 04:24:00\n",
       "1     17850.0 2010-12-01 08:26:00 374 days 04:24:00\n",
       "2     17850.0 2010-12-01 08:26:00 374 days 04:24:00\n",
       "3     17850.0 2010-12-01 08:26:00 374 days 04:24:00\n",
       "4     17850.0 2010-12-01 08:26:00 374 days 04:24:00"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adding one more day to the max data, so that the max date will have 1 as the difference and not zero.\n",
    "maximum = maximum + pd.DateOffset(days=1)\n",
    "recency['diff'] = maximum - recency.InvoiceDate\n",
    "recency.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = recency.groupby('CustomerID')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CustomerID\n",
       "12346.0   326 days 02:33:00\n",
       "12347.0     2 days 20:58:00\n",
       "12348.0    75 days 23:37:00\n",
       "12349.0    19 days 02:59:00\n",
       "12350.0   310 days 20:49:00\n",
       "12352.0    36 days 22:13:00\n",
       "12353.0   204 days 19:03:00\n",
       "12354.0   232 days 23:39:00\n",
       "12355.0   214 days 23:01:00\n",
       "12356.0    23 days 04:10:00\n",
       "12357.0    33 days 20:43:00\n",
       "12358.0     2 days 02:24:00\n",
       "12359.0     8 days 01:29:00\n",
       "12360.0    52 days 21:28:00\n",
       "12361.0   287 days 22:59:00\n",
       "12362.0     3 days 21:10:00\n",
       "12363.0   110 days 02:32:00\n",
       "12364.0     8 days 02:28:00\n",
       "12365.0   291 days 22:46:00\n",
       "12367.0     4 days 20:02:00\n",
       "12370.0    51 days 21:59:00\n",
       "12371.0    45 days 02:34:00\n",
       "12372.0    72 days 00:38:00\n",
       "12373.0   311 days 23:40:00\n",
       "12374.0    25 days 21:13:00\n",
       "12375.0     3 days 01:23:00\n",
       "12377.0   315 days 21:05:00\n",
       "12378.0   130 days 02:16:00\n",
       "12379.0    82 days 02:41:00\n",
       "12380.0    22 days 01:23:00\n",
       "                 ...       \n",
       "18245.0     7 days 22:02:00\n",
       "18246.0    24 days 01:01:00\n",
       "18248.0   114 days 06:36:00\n",
       "18249.0    17 days 21:43:00\n",
       "18250.0   301 days 22:51:00\n",
       "18251.0    87 days 21:47:00\n",
       "18252.0    51 days 00:07:00\n",
       "18255.0    89 days 23:34:00\n",
       "18256.0   355 days 04:23:00\n",
       "18257.0    39 days 22:02:00\n",
       "18259.0    25 days 00:16:00\n",
       "18260.0   173 days 00:13:00\n",
       "18261.0    43 days 21:14:00\n",
       "18262.0   140 days 20:46:00\n",
       "18263.0    23 days 20:31:00\n",
       "18265.0    72 days 22:40:00\n",
       "18268.0   134 days 17:37:00\n",
       "18269.0   358 days 21:11:00\n",
       "18270.0    38 days 22:53:00\n",
       "18272.0     3 days 00:07:00\n",
       "18273.0     2 days 23:34:00\n",
       "18274.0    18 days 02:32:00\n",
       "18276.0    21 days 19:49:00\n",
       "18277.0    58 days 21:28:00\n",
       "18278.0    74 days 00:52:00\n",
       "18280.0   278 days 02:58:00\n",
       "18281.0   181 days 01:57:00\n",
       "18282.0     8 days 01:07:00\n",
       "18283.0     4 days 00:48:00\n",
       "18287.0    43 days 03:21:00\n",
       "Name: diff, Length: 4372, dtype: timedelta64[ns]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a.diff.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Recency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>326 days 02:33:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>2 days 20:58:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>75 days 23:37:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>19 days 02:59:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>310 days 20:49:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CustomerID           Recency\n",
       "0     12346.0 326 days 02:33:00\n",
       "1     12347.0   2 days 20:58:00\n",
       "2     12348.0  75 days 23:37:00\n",
       "3     12349.0  19 days 02:59:00\n",
       "4     12350.0 310 days 20:49:00"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dataframe merging by recency\n",
    "df = pd.DataFrame(recency.groupby('CustomerID').diff.min())\n",
    "df = df.reset_index()\n",
    "df.columns = [\"CustomerID\", \"Recency\"]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Frequency</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Recency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>326 days 02:33:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>12347.0</td>\n",
       "      <td>182</td>\n",
       "      <td>4310.00</td>\n",
       "      <td>2 days 20:58:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>31</td>\n",
       "      <td>1797.24</td>\n",
       "      <td>75 days 23:37:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>73</td>\n",
       "      <td>1757.55</td>\n",
       "      <td>19 days 02:59:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>17</td>\n",
       "      <td>334.40</td>\n",
       "      <td>310 days 20:49:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CustomerID  Frequency   Amount           Recency\n",
       "0     12346.0          2     0.00 326 days 02:33:00\n",
       "1     12347.0        182  4310.00   2 days 20:58:00\n",
       "2     12348.0         31  1797.24  75 days 23:37:00\n",
       "3     12349.0         73  1757.55  19 days 02:59:00\n",
       "4     12350.0         17   334.40 310 days 20:49:00"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Combining all recency, frequency and monetary parameters\n",
    "RFM = k.merge(monetary, on = \"CustomerID\")\n",
    "RFM = RFM.merge(df, on = \"CustomerID\")\n",
    "RFM.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# outlier treatment for Amount\n",
    "plt.boxplot(RFM.Amount)\n",
    "Q1 = RFM.Amount.quantile(0.25)\n",
    "Q3 = RFM.Amount.quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "RFM = RFM[(RFM.Amount >= Q1 - 1.5*IQR) & (RFM.Amount <= Q3 + 1.5*IQR)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAD4CAYAAAAAczaOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAS+ElEQVR4nO3df2xd9X3/8efbP/JztHGCG5UElk6LkCuLr9ZaLdsiWJaNNf1+NfLHqjadvo0aqxFS8fr9dtLC6j86/ohUpGkdNVMkaLKlUvGoygRoFE2o8cRCVzRn3ykL+CuIioAMGjycMBIa23He+8PHwQFjfHwdX9+c50OK7j2f87n3vi3hlw/v8znnRmYiSaqGpnoXIElaPIa+JFWIoS9JFWLoS1KFGPqSVCEt9S5gNtdee21u2rSp3mVIUkM5evTof2Zm+0z7lnTob9q0icHBwXqXIUkNJSJeer99H9jeiYiDEfF6RByfNrY2Ip6MiBeKx7ZiPCLiOxFxIiKORcQnpr1mVzH/hYjYVesPJUkqby49/b8BPvOusbuAH2fmZuDHxTbAdmBz8W8PsB8m/0gA3wQ+DXwK+ObUHwpJ0uL5wNDPzKeAkXcN3w4cKp4fAnZMG/9eTvopsCYiPgr8HvBkZo5k5mngSd77h0SSdIXNd/XO+sx8DaB4/EgxvgF4Zdq8k8XY+41LkhbRQi/ZjBnGcpbx975BxJ6IGIyIweHh4QUtTpKqbr6hf6po21A8vl6MnwSunzZvI/DqLOPvkZn3Z2ZXZna1t8+44kiqq/7+fjo7O2lubqazs5P+/v56lyTN2XxD/zFgagXOLuDRaeNfKlbx3Ay8WbR//gG4LSLaihO4txVjUkPp7++nt7eXvr4+zp8/T19fH729vQa/GkZ80K2VI6If+C3gWuAUk6twHgF+ANwAvAx8LjNHIiKA+5g8Sfs28OXMHCzeZzfwjeJt92XmX39QcV1dXek6fS0lnZ2d9PX1sXXr1ktjAwMD9PT0cPz48VleKS2eiDiamV0z7lvK99M39LXUNDc3c/78eVpbWy+NjY+Ps2LFCiYmJupYmfSO2ULfe+9IJXR0dHDkyJHLxo4cOUJHR0edKpLKMfSlEnp7e+nu7mZgYIDx8XEGBgbo7u6mt7e33qVJc7Kk770jLTU7d+4EoKenh6GhITo6Oti3b9+lcWmps6cvSVcZe/qSJMDQl6RKMfQlqUIMfUmqEENfkirE0JekCjH0JalCDH1JqhBDX5IqxNCXpAox9CWpQgx9SaoQQ1+SKsTQl6QKMfQlqUIMfUmqEENfkirE0JekCjH0JalCDH1JqhBDX5IqxNCXpAox9CWpQgx9SaoQQ1+SKsTQl6QKMfQlqUIMfUmqkJpCPyL+b0Q8GxHHI6I/IlZExMci4pmIeCEiHoqIZcXc5cX2iWL/poX4ASRJczfv0I+IDcAfAV2Z2Qk0A18A7gG+nZmbgdNAd/GSbuB0Zv4q8O1iniRpEdXa3mkBVkZEC7AKeA34beCHxf5DwI7i+e3FNsX+bRERNX6+JKmEeYd+Zv4H8OfAy0yG/ZvAUeBMZl4opp0ENhTPNwCvFK+9UMxf9+73jYg9ETEYEYPDw8PzLU+SNINa2jttTB69fwy4DlgNbJ9hak69ZJZ97wxk3p+ZXZnZ1d7ePt/yJEkzqKW98zvAi5k5nJnjwN8BvwGsKdo9ABuBV4vnJ4HrAYr9HwZGavh8SVJJtYT+y8DNEbGq6M1vA54DBoA/KObsAh4tnj9WbFPsP5yZ7znSlyRdObX09J9h8oTsvwL/XrzX/cBe4OsRcYLJnv2B4iUHgHXF+NeBu2qoW5I0D7GUD7a7urpycHCw3mVIUkOJiKOZ2TXTPq/IlUrq7++ns7OT5uZmOjs76e/vr3dJ0py1fPAUSVP6+/vp7e3lwIEDbNmyhSNHjtDdPXn94c6dO+tcnfTBbO9IJXR2dtLX18fWrVsvjQ0MDNDT08Px48frWJn0jtnaO4a+VEJzczPnz5+ntbX10tj4+DgrVqxgYmKijpVJ77CnLy2Qjo4Ojhw5ctnYkSNH6OjoqFNFUjmGvlRCb28v3d3dDAwMMD4+zsDAAN3d3fT29ta7NGlOPJErlTB1sranp4ehoSE6OjrYt2+fJ3HVMOzpS9JVxp6+tIBcp69GZntHKsF1+mp0tnekElynr0bgOn1pgbhOX43Anr60QFynr0Zn6EsluE5fjc4TuVIJrtNXo7OnL0lXGXv6kiTA0JdK8+IsNTJ7+lIJXpylRmdPXyqhs7OTHTt28Mgjj1w6kTu17cVZWipm6+l7pC+V8Nxzz3Hu3DkOHjx46Uh/9+7dvPTSS/UuTZoTe/pSCcuWLaOnp4etW7fS2trK1q1b6enpYdmyZfUuTZoTQ18qYWxsjPvuu++yi7Puu+8+xsbG6l2aNCe2d6QSPv7xj7Njx47LLs764he/yCOPPFLv0qQ58UhfKqG3t5cHH3yQvr4+zp8/T19fHw8++KC3YVDD8EhfKmHnzp385Cc/Yfv27YyOjrJ8+XK+8pWvuFxTDcMjfamE/v5+Hn/8cZ544gnGxsZ44oknePzxx71ASw3DdfpSCX6JihqBX6IiLRC/REWNwBuuSQuko6ODu++++7J779x9991+iYoahqEvlbB161buuecedu/ezVtvvcXu3bu55557Lmv3SEtZTaEfEWsi4ocR8f8jYigifj0i1kbEkxHxQvHYVsyNiPhORJyIiGMR8YmF+RGkxTMwMMDevXs5ePAg11xzDQcPHmTv3r0MDAzUuzRpTmrq6UfEIeCfMvO7EbEMWAV8AxjJzG9FxF1AW2bujYjPAj3AZ4FPA/dm5qdne397+lpq7OmrEVyRnn5EfAi4BTgAkJljmXkGuB04VEw7BOwont8OfC8n/RRYExEfne/nS/XgF6Or0dVycdavAMPAX0fE/wCOAl8D1mfmawCZ+VpEfKSYvwF4ZdrrTxZjr9VQg7Soent7+fznP8/q1at5+eWXueGGGzh37hz33ntvvUuT5qSWnn4L8Algf2b+GnAOuGuW+THD2Ht6SxGxJyIGI2JweHi4hvKkK2spL3eW3k8toX8SOJmZzxTbP2Tyj8CpqbZN8fj6tPnXT3v9RuDVd79pZt6fmV2Z2dXe3l5DedLC27dvHw899BAvvvgiFy9e5MUXX+Shhx5i37599S5NmpN5h35m/hx4JSJuLIa2Ac8BjwG7irFdwKPF88eALxWreG4G3pxqA0mNYmhoiC1btlw2tmXLFoaGhupUkVROrTdc6wG+X6zc+RnwZSb/kPwgIrqBl4HPFXN/xOTKnRPA28VcqaFMncidvi7fE7lqJDWFfmb+GzDTsqBtM8xN4Ku1fJ5Ub729vXR3d7/ni9Ft76hReGtlqQRvraxG520YpBK8tbIanXfZlEro7Oxk5cqVHD16lMwkIvjkJz/JL37xC2+trCVjtitybe9IJTz77LMAtLW1cebMGdasWYMHJmoktnekklauXMnDDz/M6OgoDz/8MCtXrqx3SdKcGfpSSddcc82s29JSZuhLJXV2dtLT08OKFSvo6emhs7Oz3iVJc2boSyWsXr2aw4cPc8sttzAyMsItt9zC4cOHWb16db1Lk+bE0JdKeOCBB2htbWX//v2sWbOG/fv309raygMPPFDv0qQ5MfSlkpqbm2fdlpYyQ18q4c4772R0dJT169cTEaxfv57R0VHuvPPOepcmzYmhL5UwMjLCqlWrWLlyJRHBypUrWbVqFSMjI/UuTZoTQ1+ap6V8Nbv0fgx9qaRz587R09PD2bNn6enp4dy5c/UuSZoz770jlRAx+a2fzc3NTExMXHoEj/y1dMx27x2P9KWSpoL//balpcwbrkkltLS00NzczMWLF5mYmKCpqYmWlpZLR/vSUueRvlTCxMQEY2NjrFu3jqamJtatW8fY2Jihr4Zh6EslLFu2jM2bN3Pq1CkuXrzIqVOn2Lx5M8uWLat3adKcGPpSCaOjozz//PPccccdnDlzhjvuuIPnn3+e0dHRepcmzYmhL5UQEWzbto2nnnqKtWvX8tRTT7Ft2zZP5qphGPpSCZnJiRMn6Ovr4/z58/T19XHixAmXa6phuHpHKmH58uVs3LiR7du3Mzo6yvLly+nq6uLnP/95vUuT5sQjfamEW2+9laeffprx8XEAxsfHefrpp7n11lvrXJk0N4a+VMLUFeJNTU2XPXrluBqFoS+VMDIyws6dO7nxxhtpamrixhtvZOfOnd5lUw3D0JdKOnz48GUncg8fPlzvkqQ5M/Slkt5+++1Zt6WlzNU7UgkRwVtvvcVtt93GhQsXaGlp4cKFC67TV8PwSF8qYcOGDUQEFy5cALgU+Bs2bKhzZdLcGPpSCcPDw++5ECszGR4erlNFUjmGvlTC1D122traLnv03jtqFDWHfkQ0R8T/i4i/L7Y/FhHPRMQLEfFQRCwrxpcX2yeK/Ztq/WypHm666Sauu+46mpqauO6667jpppvqXZI0ZwtxpP81YGja9j3AtzNzM3Aa6C7Gu4HTmfmrwLeLeVLDOXbsGG+88QYAb7zxBseOHatzRdLc1RT6EbER+J/Ad4vtAH4b+GEx5RCwo3h+e7FNsX9buORBDers2bNcvHiRs2fP1rsUqZRaj/T/EvgT4GKxvQ44k5kXiu2TwNSyhg3AKwDF/jeL+ZeJiD0RMRgRg54c01I1FfaGvhrNvEM/Iv4X8HpmHp0+PMPUnMO+dwYy78/Mrszsam9vn295kqQZ1HJx1m8Cvx8RnwVWAB9i8sh/TUS0FEfzG4FXi/kngeuBkxHRAnwY8IYlakhTF2VNPUqNYt5H+pn5p5m5MTM3AV8ADmfmHwIDwB8U03YBjxbPHyu2KfYfTr95Qg3q4sWLlz1KjeJKrNPfC3w9Ik4w2bM/UIwfANYV418H7roCny0tCkNfjWpB7r2Tmf8I/GPx/GfAp2aYcx743EJ8nlRvra2tjI+PX3qUGoVX5ErzMP2bs6RGYuhLUoUY+pJUIYa+JFWIoS9JFWLoS1KFGPqSVCGGviRViKEvSRVi6EtShRj6klQhhr4kVYihL0kVYuhLUoUY+pJUIYa+JFWIoS9JFWLoS1KFGPqSVCGGviRViKEvSRVi6EtShRj6klQhhr4kVYihL0kVYuhLUoUY+pJUIYa+JFWIoS9JFWLoS1KFGPqSVCHzDv2IuD4iBiJiKCKejYivFeNrI+LJiHiheGwrxiMivhMRJyLiWER8YqF+CEnS3NRypH8B+OPM7ABuBr4aER8H7gJ+nJmbgR8X2wDbgc3Fvz3A/ho+W5I0D/MO/cx8LTP/tXj+FjAEbABuBw4V0w4BO4rntwPfy0k/BdZExEfnXbkkqbQF6elHxCbg14BngPWZ+RpM/mEAPlJM2wC8Mu1lJ4sxSdIiqTn0I+KXgIeB/5OZ/zXb1BnGcob32xMRgxExODw8XGt5kqRpagr9iGhlMvC/n5l/VwyfmmrbFI+vF+MngeunvXwj8Oq73zMz78/Mrszsam9vr6U8SdK71LJ6J4ADwFBm/sW0XY8Bu4rnu4BHp41/qVjFczPw5lQbSJK0OFpqeO1vAv8b+PeI+Ldi7BvAt4AfREQ38DLwuWLfj4DPAieAt4Ev1/DZkqR5mHfoZ+YRZu7TA2ybYX4CX53v50lX0uT/uF7595j8NZDqp5YjfemqMdcwni3YDXQ1Am/DIJXQ1DTzr8z7jUtLjf+lSiVMTEy8J+CbmpqYmJioU0VSObZ3pJKmAj4ibOmo4XikL0kVYuhLUoUY+pJUIYa+JFWIoS9JFWLoS1KFGPqSVCGGviRViKEvSRVi6EtShRj6klQhhr4kVYihL0kVYuhLUoUY+pJUId5PX1eltWvXcvr06Sv+OQvx3bqzaWtrY2Rk5Ip+hqrF0NdV6fTp01fFF5xc6T8qqh7bO5JUIYa+JFWIoS9JFWLoS1KFGPqSVCGGviRViKEvSRXiOn1dlfKbH4I/+3C9y6hZfvND9S5BVxlDX1eluPu/rpqLs/LP6l2Fria2dySpQgx9SaqQRW/vRMRngHuBZuC7mfmtxa5B1XA13Lemra2t3iXoKrOooR8RzcBfAb8LnAT+JSIey8znFrMOXf0Wo58fEVfFeQNVy2K3dz4FnMjMn2XmGPC3wO2LXIMkVdZit3c2AK9M2z4JfHr6hIjYA+wBuOGGGxavMlXafFtBZV/n/xmo3hb7SH+m35DLfgsy8/7M7MrMrvb29kUqS1WXmYvyT6q3xQ79k8D107Y3Aq8ucg2SVFmLHfr/AmyOiI9FxDLgC8Bji1yDJFXWovb0M/NCRNwJ/AOTSzYPZuazi1mDJFXZoq/Tz8wfAT9a7M+VJHlFriRViqEvSRVi6EtShRj6klQhsZQvGImIYeCletchvY9rgf+sdxHSDH45M2e8unVJh760lEXEYGZ21bsOqQzbO5JUIYa+JFWIoS/N3/31LkAqy56+JFWIR/qSVCGGviRViKEvlRQRByPi9Yg4Xu9apLIMfam8vwE+U+8ipPkw9KWSMvMpYKTedUjzYehLUoUY+pJUIYa+JFWIoS9JFWLoSyVFRD/wz8CNEXEyIrrrXZM0V96GQZIqxCN9SaoQQ1+SKsTQl6QKMfQlqUIMfUmqEENfkirE0JekCvlv9bmbD2zoICUAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# outlier treatment for Frequency\n",
    "plt.boxplot(RFM.Frequency)\n",
    "Q1 = RFM.Frequency.quantile(0.25)\n",
    "Q3 = RFM.Frequency.quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "RFM = RFM[(RFM.Frequency >= Q1 - 1.5*IQR) & (RFM.Frequency <= Q3 + 1.5*IQR)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# outlier treatment for Recency\n",
    "plt.boxplot(RFM.Recency)\n",
    "Q1 = RFM.Recency.quantile(0.25)\n",
    "Q3 = RFM.Recency.quantile(0.75)\n",
    "IQR = Q3 - Q1\n",
    "RFM = RFM[(RFM.Recency >= Q1 - 1.5*IQR) & (RFM.Recency <= Q3 + 1.5*IQR)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Frequency</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Recency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>12346.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0.00</td>\n",
       "      <td>326 days 02:33:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>12348.0</td>\n",
       "      <td>31</td>\n",
       "      <td>1797.24</td>\n",
       "      <td>75 days 23:37:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>12349.0</td>\n",
       "      <td>73</td>\n",
       "      <td>1757.55</td>\n",
       "      <td>19 days 02:59:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>12350.0</td>\n",
       "      <td>17</td>\n",
       "      <td>334.40</td>\n",
       "      <td>310 days 20:49:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>12352.0</td>\n",
       "      <td>95</td>\n",
       "      <td>1545.41</td>\n",
       "      <td>36 days 22:13:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>12353.0</td>\n",
       "      <td>4</td>\n",
       "      <td>89.00</td>\n",
       "      <td>204 days 19:03:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>12354.0</td>\n",
       "      <td>58</td>\n",
       "      <td>1079.40</td>\n",
       "      <td>232 days 23:39:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>12355.0</td>\n",
       "      <td>13</td>\n",
       "      <td>459.40</td>\n",
       "      <td>214 days 23:01:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>12356.0</td>\n",
       "      <td>59</td>\n",
       "      <td>2811.43</td>\n",
       "      <td>23 days 04:10:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12358.0</td>\n",
       "      <td>19</td>\n",
       "      <td>1168.06</td>\n",
       "      <td>2 days 02:24:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    CustomerID  Frequency   Amount           Recency\n",
       "0      12346.0          2     0.00 326 days 02:33:00\n",
       "2      12348.0         31  1797.24  75 days 23:37:00\n",
       "3      12349.0         73  1757.55  19 days 02:59:00\n",
       "4      12350.0         17   334.40 310 days 20:49:00\n",
       "5      12352.0         95  1545.41  36 days 22:13:00\n",
       "6      12353.0          4    89.00 204 days 19:03:00\n",
       "7      12354.0         58  1079.40 232 days 23:39:00\n",
       "8      12355.0         13   459.40 214 days 23:01:00\n",
       "9      12356.0         59  2811.43  23 days 04:10:00\n",
       "11     12358.0         19  1168.06   2 days 02:24:00"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RFM.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# standardise all parameters\n",
    "RFM_norm1 = RFM.drop(\"CustomerID\", axis=1)\n",
    "RFM_norm1.Recency = RFM_norm1.Recency.dt.days\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "standard_scaler = StandardScaler()\n",
    "RFM_norm1 = standard_scaler.fit_transform(RFM_norm1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Frequency</th>\n",
       "      <th>Amount</th>\n",
       "      <th>Recency</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.070949</td>\n",
       "      <td>-1.041614</td>\n",
       "      <td>2.136422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.375498</td>\n",
       "      <td>1.385298</td>\n",
       "      <td>-0.282050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.631707</td>\n",
       "      <td>1.331702</td>\n",
       "      <td>-0.821629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.711233</td>\n",
       "      <td>-0.590055</td>\n",
       "      <td>1.982257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.159290</td>\n",
       "      <td>1.045238</td>\n",
       "      <td>-0.657828</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Frequency    Amount   Recency\n",
       "0  -1.070949 -1.041614  2.136422\n",
       "1  -0.375498  1.385298 -0.282050\n",
       "2   0.631707  1.331702 -0.821629\n",
       "3  -0.711233 -0.590055  1.982257\n",
       "4   1.159290  1.045238 -0.657828"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "RFM_norm1 = pd.DataFrame(RFM_norm1)\n",
    "RFM_norm1.columns = ['Frequency','Amount','Recency']\n",
    "RFM_norm1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import NearestNeighbors\n",
    "from random import sample\n",
    "from numpy.random import uniform\n",
    "import numpy as np\n",
    "from math import isnan\n",
    " \n",
    "def hopkins(X):\n",
    "    d = X.shape[1]\n",
    "    #d = len(vars) # columns\n",
    "    n = len(X) # rows\n",
    "    m = int(0.1 * n) \n",
    "    nbrs = NearestNeighbors(n_neighbors=1).fit(X.values)\n",
    " \n",
    "    rand_X = sample(range(0, n, 1), m)\n",
    " \n",
    "    ujd = []\n",
    "    wjd = []\n",
    "    for j in range(0, m):\n",
    "        u_dist, _ = nbrs.kneighbors(uniform(np.amin(X,axis=0),np.amax(X,axis=0),d).reshape(1, -1), 2, return_distance=True)\n",
    "        ujd.append(u_dist[0][1])\n",
    "        w_dist, _ = nbrs.kneighbors(X.iloc[rand_X[j]].values.reshape(1, -1), 2, return_distance=True)\n",
    "        wjd.append(w_dist[0][1])\n",
    " \n",
    "    H = sum(ujd) / (sum(ujd) + sum(wjd))\n",
    "    if isnan(H):\n",
    "        print(ujd, wjd)\n",
    "        H = 0\n",
    " \n",
    "    return H"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8897242395705159"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hopkins(RFM_norm1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "hopkins value is 0.89 ie., it has high tendency to cluster"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=50,\n",
       "       n_clusters=5, n_init=10, n_jobs=None, precompute_distances='auto',\n",
       "       random_state=None, tol=0.0001, verbose=0)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# when Kmeans with K=5\n",
    "model_clus5 = KMeans(n_clusters = 5, max_iter=50)\n",
    "model_clus5.fit(RFM_norm1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import silhouette_score\n",
    "sse_ = []\n",
    "for k in range(2, 15):\n",
    "    kmeans = KMeans(n_clusters=k).fit(RFM_norm1)\n",
    "    sse_.append([k, silhouette_score(RFM_norm1, kmeans.labels_)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(pd.DataFrame(sse_)[0], pd.DataFrame(sse_)[1]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f9ba2f5bda0>]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYMAAAD4CAYAAAAO9oqkAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjAsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+17YcXAAAgAElEQVR4nO3de3Scd33n8fd3LhrdRndpLMt2bCeSE2KbJojE4dYU08SJsyTdhRDa07iQ1rSl3bJst6TbPaUHtj3QdpeSXUoxJIvDsiEhlJJCCIQEDrRNHOTcHOM4chLHlmxLsnW/3377x/xkT5SRLGskPSPN53XOnHnm9/yema8fj/TR83t+84w55xARkdwWCroAEREJnsJAREQUBiIiojAQEREUBiIiAkSCLmC+qqqq3Pr164MuQ0Rk2di/f/9p51x1unXLNgzWr19PU1NT0GWIiCwbZvbaTOs0TCQiIgoDERFRGIiICAoDERFBYSAiIigMREQEhYGIiJBjYTA+MckXfnyEn77UEXQpIiJZJafCIBwyvvyzV3jk4KmgSxERySo5FQZmRkNNnJdO9QVdiohIVsmpMACoTxTzUlsf+oY3EZFzci4MNq2K0zs8TnvfSNCliIhkjZwLg/qaOAAvtWmoSERkSs6FQUOiGIDDOm8gInJWzoVBZXGMyqI8mtv6gy5FRCRr5FwYADQk4rzUriMDEZEpORoGxTS39WtGkYiIl5NhUJ+I0z8yzome4aBLERHJCjkZBptWaUaRiEiqnAyDBj+9tFlhICIC5GgYlBZGqYnHOHxKM4pERCBHwwCSM4qaNaNIRATI9TBo62dyUjOKRERyOAyKGRqboLV7KOhSREQCl7NhUJ9InkTWZSlERHI6DJLXKNInkUVE5hAGZnaPmbWb2QspbRVm9qiZNfv7ct9uZnaXmR0xs+fN7MqUbXb5/s1mtiul/S1mdsBvc5eZ2UL/I9MpyY+yujRf1ygSEWFuRwZfBXZMa7sTeMw5Vw885h8D3ADU+9tu4IuQDA/gk8DVwFXAJ6cCxPfZnbLd9NdaNPWJuIaJRESYQxg4534KdE5rvhnY65f3ArektN/rkp4EysysFrgeeNQ51+mc6wIeBXb4dSXOuSdc8kJB96Y816JrSBTzckc/E5pRJCI5br7nDBLOuZMA/r7Gt9cBx1P6tfi22dpb0rSnZWa7zazJzJo6OjrmWfo59Yk4I+OTHOsczPi5RESWs4U+gZxuvN/Noz0t59we51yjc66xurp6niWesymhaxSJiMD8w6DND/Hg79t9ewuwNqXfGuDEedrXpGlfEpfU+BlFOm8gIjluvmHwEDA1I2gX8J2U9tv9rKJtQI8fRvoBcJ2ZlfsTx9cBP/Dr+sxsm59FdHvKcy26oliENeUFvNSuGUUiktsi5+tgZvcB1wJVZtZCclbQZ4AHzOwO4Bjwft/9YeBG4AgwCHwIwDnXaWafBn7u+33KOTd1Uvr3SM5YKgC+729LZlMirquXikjOO28YOOc+OMOq7Wn6OuCjMzzPPcA9adqbgM3nq2Ox1Cfi/LS5g7GJSaLhnP0MnojkuJz/7deQKGZswvHamYGgSxERCYzC4OyMIp03EJHclfNhcElNMWaaXioiuS3nwyA/GuaiikKFgYjktJwPA0ieRNYwkYjkMoUByZPIR08PMDo+GXQpIiKBUBiQPIk8Pul49bRmFIlIblIYcG5G0WGdNxCRHKUwADZWFxEOmT6JLCI5S2EAxCJhLqrUjCIRyV0KA2+TZhSJSA5TGHj1iTivnRlgeGwi6FJERJacwsBrSBQz6eDlDh0diEjuURh4U9961qyhIhHJQQoDb31VEdGwaXqpiOQkhYEXDYfYUFWk6aUikpMUBil0jSIRyVUKgxSbEnGOdw0yODoedCkiIktKYZCiIVGMc3CkXUcHIpJbFAYp6vWtZyKSoxQGKS6qKCQvHNJJZBHJOQqDFJFwiItrijW9VERyjsJgmoZEsT54JiI5R2EwTUMiTmv3EP0jmlEkIrlDYTBNw9nLUmioSERyh8JgmoZEMYC+20BEcorCYJq15YXkR0OaXioiOUVhME0oZFxSU6wjAxHJKQqDNBoScc0oEpGcojBIoyER51TvMD1DY0GXIiKyJDIKAzP7T2Z20MxeMLP7zCzfzDaY2T4zazaz+80sz/eN+cdH/Pr1Kc/zp779sJldn9k/KXNTJ5E1o0hEcsW8w8DM6oD/CDQ65zYDYeA24LPA55xz9UAXcIff5A6gyzl3CfA53w8ze5Pf7nJgB/D3Zhaeb10Lob5G1ygSkdyS6TBRBCgwswhQCJwE3g086NfvBW7xyzf7x/j1283MfPs3nHMjzrlXgSPAVRnWlZG6sgKK8sI6iSwiOWPeYeCcawX+FjhGMgR6gP1At3Nu6uO7LUCdX64Djvttx33/ytT2NNu8jpntNrMmM2vq6OiYb+nnFQoZlyTiCgMRyRmZDBOVk/yrfgOwGigCbkjT1U1tMsO6mdrf2OjcHudco3Ousbq6+sKLvgANNcUaJhKRnJHJMNF7gFedcx3OuTHgH4G3AWV+2AhgDXDCL7cAawH8+lKgM7U9zTaBaUjEOd0/QufAaNCliIgsukzC4BiwzcwK/dj/duAXwI+B9/k+u4Dv+OWH/GP8+sedc8633+ZnG20A6oGnMqhrQTSsmjqJrKEiEVn5MjlnsI/kieCngQP+ufYAnwA+bmZHSJ4TuNtvcjdQ6ds/Dtzpn+cg8ADJIHkE+KhzbmK+dS0UTS8VkVwSOX+XmTnnPgl8clrzK6SZDeScGwbeP8Pz/CXwl5nUstBWleQTj0V03kBEcoI+gTwDM6NhlWYUiUhuUBjMoiGRvGBd8tSGiMjKpTCYRX1NnK7BMU73a0aRiKxsCoNZ6FvPRCRXKAxm0bAqOaPosMJARFY4hcEsqotjlBVGNaNIRFY8hcEszIyGmriGiURkxVMYnEe9ZhSJSA5QGJzHplVxeofHaesdCboUEZFFozA4j3NfdKOhIhFZuRQG5zF1jSKFgYisZAqD86gsjlFVnEezZhSJyAqmMJiD+pq4PmsgIiuawmAOGhLFHGnv14wiEVmxFAZzUJ+I0z8yzome4aBLERFZFAqDOdg09a1npzRUJCIrk8JgDho0vVREVjiFwRyUFkapicd0jSIRWbEUBnPUkIjT3K4jAxFZmRQGc9SQiNPc1s/kpGYUicjKozCYo4ZEMUNjE7R0DQVdiojIglMYzFF9QieRRWTlUhjMUX1C33omIiuXwmCOSvKjrC7N1xfdiMiKpDC4APWJuKaXisiKpDC4AA2JYo509DOhGUUissIoDC5AQyLO6Pgkr50ZCLoUEZEFpTC4AA1nZxRpqEhEVhaFwQW4pEbfeiYiK5PC4AIUxSJcuirOT1/qCLoUEZEFlVEYmFmZmT1oZi+a2SEzu8bMKszsUTNr9vflvq+Z2V1mdsTMnjezK1OeZ5fv32xmuzL9Ry2mnVtqaXqti5M9+iSyiKwcmR4ZfB54xDl3KfBm4BBwJ/CYc64eeMw/BrgBqPe33cAXAcysAvgkcDVwFfDJqQDJRju31gLw8IFTAVciIrJw5h0GZlYCvAu4G8A5N+qc6wZuBvb6bnuBW/zyzcC9LulJoMzMaoHrgUedc53OuS7gUWDHfOtabBuri3lTbQnfff5E0KWIiCyYTI4MNgIdwP8xs2fM7CtmVgQknHMnAfx9je9fBxxP2b7Ft83U/gZmttvMmsysqaMjuHH7nVtreeZYNy1dg4HVICKykDIJgwhwJfBF59wVwADnhoTSsTRtbpb2NzY6t8c51+ica6yurr7QehfMTX6o6PsaKhKRFSKTMGgBWpxz+/zjB0mGQ5sf/sHft6f0X5uy/RrgxCztWeuiyiK21JVqqEhEVox5h4Fz7hRw3Mw2+abtwC+Ah4CpGUG7gO/45YeA2/2som1Ajx9G+gFwnZmV+xPH1/m2rLZzay3PtfRwvFNDRSKy/GU6m+gPga+b2fPALwF/BXwG+FUzawZ+1T8GeBh4BTgCfBn4fQDnXCfwaeDn/vYp35bVdm5JDhV978DJgCsREcmcObc8L7rW2NjompqaAq3h5i/8K5OTjn/+w3cEWoeIyFyY2X7nXGO6dfoEcgZu2lLLgdYejp7WhetEZHlTGGTgxq0aKhKRlUFhkIG6sgKuXFfG955XGIjI8qYwyNDOrav5xcleXunQZa1FZPlSGGToxi2rAHR0ICLLmsIgQ7WlBbx1fbnOG4jIsqYwWAA7t9Ty4qk+jrTrS29EZHlSGCyAG7bUYgbf1VCRiCxTCoMFkCjJ56r1FTpvICLLlsJggdy0tZbm9n4On9JQkYgsPwqDBbJjcy0hg+/pSqYisgwpDBZIdTzGto2VfPfASZbr9Z5EJHcpDBbQzq21vNIxwKGTGioSkeVFYbCAdly+inDI+N4BDRWJyPKiMFhAlcUx3nZxJd97XkNFIrK8KAwW2M4ttRw9M8jBE71BlyIiMmcKgwV2/eWriIRMH0ATkWVFYbDAyovyePslVXzvwAkNFYnIsqEwWAQ7t9ZyvHOIA609QZciIjInCoNFcP2bVhENa6hIRJYPhcEiKC2M8s76as0qEpFlQ2GwSHZuqaW1e4hnj3cHXYqIyHkpDBbJr16eIC8c0lCRiCwLCoNFUpIf5V0N1Tx84CSTkxoqEpHspjBYRDdtreVkzzDPHO8KuhQRkVkpDBbR9stqyIuE+OfnNFQkItlNYbCI4vlRfmWThopEJPspDBbZzq2rae8boek1DRWJSPZSGCyy7ZfWEIuE+K6+AU1EspjCYJEVxSK8+9IaHj5wigkNFYlIlso4DMwsbGbPmNl3/eMNZrbPzJrN7H4zy/PtMf/4iF+/PuU5/tS3Hzaz6zOtKdvctHU1p/tHeOrVzqBLERFJayGODP4IOJTy+LPA55xz9UAXcIdvvwPocs5dAnzO98PM3gTcBlwO7AD+3szCC1BX1viVS6spiIb1DWgikrUyCgMzWwPsBL7iHxvwbuBB32UvcItfvtk/xq/f7vvfDHzDOTfinHsVOAJclUld2aYwL8K7L6vh+wdOMT4xGXQ5IiJvkOmRwd8BfwJM/YarBLqdc+P+cQtQ55frgOMAfn2P73+2Pc02r2Nmu82sycyaOjo6Mix9af27rbWcGRhln4aKRCQLzTsMzOwmoN05tz+1OU1Xd551s23z+kbn9jjnGp1zjdXV1RdUb9Cu3VRDYV5Y1yoSkayUyZHB24H3mtlR4Bskh4f+Digzs4jvswaYGihvAdYC+PWlQGdqe5ptVoz8aJj3XJbgkRdOMqahIhHJMvMOA+fcnzrn1jjn1pM8Afy4c+43gB8D7/PddgHf8csP+cf49Y+75MX+HwJu87ONNgD1wFPzrSub3bS1lq7BMZ54+UzQpYiIvM5ifM7gE8DHzewIyXMCd/v2u4FK3/5x4E4A59xB4AHgF8AjwEedcxOLUFfg3tVQTTw/wme+/yJdA6NBlyMicpYt12/iamxsdE1NTUGXccF+crid3V/bz8aqIv7vb19NVXEs6JJEJEeY2X7nXGO6dfoE8hK7dlMN9+x6K0fPDPDBPU/S3jccdEkiIgqDILyjvoqvfugqWruHuO1LT3KqR4EgIsFSGARk28ZK7v3wVbT3jfCBPU/Q2j0UdEkiksMUBgFqXF/B1+64is6BUT7wpSc43jkYdEkikqMUBgG7Yl059/3ONvpHxrn1S0/w6umBoEsSkRykMMgCm+tK+X+/vY2R8Uk+8KUnONLeH3RJIpJjFAZZ4k2rS/jG7m1MOrhtzxMcPtUXdEkikkMUBlmkIRHn/o9sIxwybtvzBAdP9ARdkojkCIVBlrm4upj7d19DQTTMr395H8+3dAddkojkAIVBFlpfVcT9H7mGeH6E3/jyPp4+1hV0SSKywikMstTaikIe+Mg1VBTn8Ztf2cfPj+p7EERk8SgMstjqsgIe+Mg1JErzuf3up3S1UxFZNAqDLJcoyef+3dewtqKAD331KX7WvLy+4U1ElgeFwTJQHY9x3+9sY0NVMXfsbeKbTceZnFyeV5sVkeykMFgmKotj3Pc7V7OlrpT/8uDz3HjXz3jsUBvL9RLkIpJdFAbLSFlhHt/8yDXc9cErGB6b4I69TbzvH55g3ys6lyAimVEYLDOhkPHeN6/m0Y//Mn/1a1to6RrkA3ueZNc9T/FCqz6kJiLzo286W+aGxybY+29H+fufvEzP0Bg3ba3lP1+3iQ1VRUGXJiJZZrZvOlMYrBA9Q2N8+aevcPe/vMroxCS3Nq7lj7bXs6o0P+jSRCRLKAxySEffCF/48RG+vu81Qmbsett6fu+XL6a8KC/o0kQkYAqDHHS8c5DP/eglvv1MK8V5EXa/ayMffscGimKRoEsTkYAoDHLYS219/O0PDvPDX7RRVZzHR3/lEn796nXEIuGgSxORJaYwEJ4+1sVfP/IiT77SSXlhlFuuqOPWxrVcVlsSdGkiskQUBgKAc44nXj7D1586xqMH2xidmGRLXSm3Nq7hvW+uo7QwGnSJIrKIFAbyBl0Dozz03AkeaDrOwRO95EVCXH/5Km5tXMPbL64iFLKgSxSRBaYwkFm90NrDg/tb+PYzrfQMjVFXVsB/eMsa3v+WNaytKAy6PBFZIAoDmZPhsQl+dKiNB5pa+FlzB87B2y6u5NbGtezYvIr8qE46iyxnCgO5YCe6h/jW/ha+ub+FY52DxPMjvPfNq7m1cS1b15RipmEkkeVGYSDzNjnpeOpoJw80HefhAycZHpvkospCtl+a4D2X1fDWDRVEw7rElchysChhYGZrgXuBVcAksMc593kzqwDuB9YDR4FbnXNdlvxT8vPAjcAg8FvOuaf9c+0C/pt/6v/unNt7vtdXGCy93uExHn7+JI8cPMW/vXyG0fFJ4vkRfrmhmvdcluDaTdWUFeqTziLZarHCoBaodc49bWZxYD9wC/BbQKdz7jNmdidQ7pz7hJndCPwhyTC4Gvi8c+5qHx5NQCPg/PO8xTk367fAKwyCNTg6zs+aT/PYoTYef7Gd0/2jhEPGWy4q5z2X1bD9sgQXVxcHXaaIpFiSYSIz+w7wv/3tWufcSR8YP3HObTKzL/nl+3z/w8C1Uzfn3Ed8++v6zURhkD0mJx3PtXTz2KF2fnSojRdP9QGwoaqI7Zcmg+Gt68uJaDhJJFCzhcGCXKjGzNYDVwD7gIRz7iSAD4Qa360OOJ6yWYtvm6ldlolQyLhiXTlXrCvnj6/fREvXII+/2M6PDrVz7xOv8ZV/eZWS/AjXbqph+2U1vOOSKiqLY0GXLSIpMg4DMysGvgV8zDnXO8ssk3Qr3Czt6V5rN7AbYN26dRderCyJNeWF3H7Nem6/Zj39I+P8S3MHPzrUzo9fbOeh504AcFFlIVesLfMhUsalq0rIi+jIQSQoGYWBmUVJBsHXnXP/6JvbzKw2ZZio3be3AGtTNl8DnPDt105r/0m613PO7QH2QHKYKJPaZWkUxyLs2FzLjs21TPjhpJ+/2skzx7r5t5fP8E/PJsMhFgmxpa6UK9adC4ja0oKAqxfJHZmcQDZgL8mTxR9Laf8b4EzKCeQK59yfmNlO4A84dwL5LufcVf4E8n7gSv8UT5M8gdw52+vrnMHy55zjZM8wzxzr5pljXTxzvJsDrT2Mjk8CkCiJccXa8rMBsaWulII8ffBNZL4W65zB24HfBA6Y2bO+7b8CnwEeMLM7gGPA+/26h0kGwRGSU0s/BOCc6zSzTwM/9/0+db4gkJXBzFhdVsDqsgJ2bq0FYHR8kkMne3nmWBfPHu/mmePdPHLwFADhkHFZbZyta8rYvLqUzXUlNCTi+mS0yALQh84k653pH0kGw7Funj7WxYHWHvqGxwGIhIz6RJzLV5eweXUJm+tKuay2RF/iI5KGPoEsK4pzjpauIV5o7eGFEz280NrLwRM9nO4fBcAMNlYVcbk/eti8upTLV5fqEt2S8xZ9aqnIUjIz1lYUsraikBu2JIeXnHO0940kA6K1lxdO9NB0tPPs7CWANeUFbF5dSkOimHWVRVxUWci6ikJq4jFda0lynsJAVgQzI1GST6Ikn+2XJc62dw6McvDEuYA42NrDD39xismUA+L8aIh1FYX+5kPCB8Wa8gJ9RajkBIWBrGgVRXm8s76ad9ZXn20bHZ+ktXuI184McKxzkGNnBnnN3//rkTMMjU2c7WsGq0sLWFtRwEUVRayrTB6R1JUVsLa8gKrimL4ISFYEhYHknLxIiA1VRWyoKnrDOuccHf0jyYA4M5gMi85BXjszwGMvtnO6f+T1zxUOsbosn7ryAtaUFVJXXkBdWQFryguoKy9gVUm+LsMhy4LCQCSFmVETz6cmnk/j+oo3rB8YGaela4jW7kFau4Zo6RqipXuI1q4hHj/cTkff68MiHDJWlUyFRTIgVpcVkCiJJV+nJEZlUYywji4kYAoDkQtQFIuwaVWcTaviadcPj01wonuI1u5kULR2TS0P8uQrZzjVO/y68xWQDIzq4lgyIErySZTESMST5z9qSmJnz4WUF0Z1olsWjcJAZAHlR8NsrC5m4wyX7x6bmKSjb4S23mHaekdo7xtOWR7heOcgTUc76Roce8O2eeEQ1fEYNSUxqouT98mjmNcvVxbrSEMunMJAZAlFw6Gzn7qezfDYBB19U2GREh69w7T3jXD0zABPHe2kO01ohAwqi2PJkIifG46qiceojseoKo5RVphHRVEepQVRBYcACgORrJQfDZ/9LMVsRsanQmOE9t4ROvpH6PCB0e7D5OCJXk73j7xheAqSs6VK8qNUFOVRVhilvDDP36KU+7aKwjzKCvMoL0oulxZGNd12BVIYiCxjsUiYNeWFrCmfPTQmJh1nBpKB0TkwStfgKF0Do3QNjiWXB8foHhylrXeYw6f66BocZXB0Ysbni0VCxPOjlBREKMmPEs+PUFIQpSSlrSSlbfr6gmhY5z+yjMJAJAeEQ+dmSc3V8NgE3VNh4YOjc3CU3qExeofH6B0a9/dj9A2P09o9RO/QOH3DY4z4K8/OVk/JtICIx1KCpCAZJvGU5ZKCZKiUFkQpjkUUJgtMYSAiaeVHw6wqDbOqdO4BMmV4bIK+4WRY9A2PvyFA+l63nFzf0dd/tm22oxJIhklZQZTSwihlBVHKCvPO3RdGKSuMUvq69ihlBXnE8yP6kOAMFAYisuDyo2Hyo2Gq4/P7etOxiUn6h8fTBkj30Cg9Q2N0D47RPTRGz+AY7X3DvNTWR8/gGH0j4zM+r1nyC5eK8iIUxsIU5UUoyAtTlBemMBahMBqmKBahMC/sbxGKYmEK8iLJPv5xcSx51BLPjxCLhFbEUYrCQESyTjQcorwoj/KivAvedmxikt6hZFB0D47RMzSaDA5/XqR3eJzB0XEGRycYHJ1gYGSc0/2jDHYOnn08ODrBeLoz7mlEQkZxfuRcQMQiZx8X50eIxyLEzz6OUpQXJhYNEYuEiUX8fTR0bjkSOrt+KWd6KQxEZEWJhkNUFic/b5GJ0fFJBkfHGRidYGh0nIGRCQb8ff/IGP3D4/SNjNM/PE7/yDh9w8lb/0jySOWVjmR77/D42W/vu1CRkPlwmAqOEDXxfB743Wsy+relfa0Ff0YRkRUgLxIiL5JH2ewTteZkZHwiGSI+OEYnJhkZm/D3k4yMTzIyPpG8H/P3U23T1hcs0jf7KQxERBZZcvgnTMU8hr2Wii6nKCIiCgMREVEYiIgICgMREUFhICIiKAxERASFgYiIoDAQERHAnJvb9TeyjZl1AK/Nc/Mq4PQClrPQVF9mVF9mVF9msrm+i5xz1elWLNswyISZNTnnGoOuYyaqLzOqLzOqLzPZXt9MNEwkIiIKAxERyd0w2BN0Aeeh+jKj+jKj+jKT7fWllZPnDERE5PVy9chARERSKAxERGRlh4GZ7TCzw2Z2xMzuTLM+Zmb3+/X7zGz9Eta21sx+bGaHzOygmf1Rmj7XmlmPmT3rb3++VPX51z9qZgf8azelWW9mdpfff8+b2ZVLWNumlP3yrJn1mtnHpvVZ0v1nZveYWbuZvZDSVmFmj5pZs78vn2HbXb5Ps5ntWsL6/sbMXvT/f982s7IZtp31vbCI9f2FmbWm/B/eOMO2s/6sL2J996fUdtTMnp1h20Xffxlzzq3IGxAGXgY2AnnAc8CbpvX5feAf/PJtwP1LWF8tcKVfjgMvpanvWuC7Ae7Do0DVLOtvBL4PGLAN2Bfg//Upkh+oCWz/Ae8CrgReSGn7a+BOv3wn8Nk021UAr/j7cr9cvkT1XQdE/PJn09U3l/fCItb3F8Afz+H/f9af9cWqb9r6/wH8eVD7L9PbSj4yuAo44px7xTk3CnwDuHlan5uBvX75QWC7mdlSFOecO+mce9ov9wGHgLqleO0FdDNwr0t6Eigzs9oA6tgOvOycm+8n0heEc+6nQOe05tT32F7gljSbXg886pzrdM51AY8CO5aiPufcD51z4/7hk8CahX7duZph/83FXH7WMzZbff73xq3AfQv9uktlJYdBHXA85XELb/xle7aP/4HoASqXpLoUfnjqCmBfmtXXmNlzZvZ9M7t8SQsDB/zQzPab2e406+eyj5fCbcz8Qxjk/gNIOOdOQvIPAKAmTZ9s2Y8fJnmkl8753guL6Q/8MNY9MwyzZcP+eyfQ5pxrnmF9kPtvTlZyGKT7C3/6PNq59FlUZlYMfAv4mHOud9rqp0kOfbwZ+F/APy1lbcDbnXNXAjcAHzWzd01bnw37Lw94L/DNNKuD3n9zlQ378c+AceDrM3Q533thsXwRuBj4JeAkyaGY6QLff8AHmf2oIKj9N2crOQxagLUpj9cAJ2bqY2YRoJT5HabOi5lFSQbB151z/zh9vXOu1znX75cfBqJmVrVU9TnnTvj7duDbJA/HU81lHy+2G4CnnXNt01cEvf+8tqmhM3/fnqZPoPvRn7C+CfgN5we4p5vDe2FROOfanHMTzrlJ4MszvG7Q+y8C/Hvg/pn6BLX/LsRKDoOfA/VmtsH/9Xgb8NC0Pg8BUzM33gc8PtMPw0LzY4x3A4ecc/9zhj6rps5hmNlVJP+/zixRfUVmFp9aJnmi8ccMA+cAAAFASURBVIVp3R4CbvezirYBPVNDIktoxr/Igtx/KVLfY7uA76Tp8wPgOjMr98Mg1/m2RWdmO4BPAO91zg3O0Gcu74XFqi/1HNSvzfC6c/lZX0zvAV50zrWkWxnk/rsgQZ/BXswbydkuL5GcafBnvu1TJN/4APkkhxeOAE8BG5ewtneQPJR9HnjW324Efhf4Xd/nD4CDJGdHPAm8bQnr2+hf9zlfw9T+S63PgC/4/XsAaFzi/99Ckr/cS1PaAtt/JEPpJDBG8q/VO0ieg3oMaPb3Fb5vI/CVlG0/7N+HR4APLWF9R0iOt0+9B6dm160GHp7tvbBE9X3Nv7eeJ/kLvnZ6ff7xG37Wl6I+3/7VqfdcSt8l33+Z3nQ5ChERWdHDRCIiMkcKAxERURiIiIjCQEREUBiIiAgKAxERQWEgIiLA/wf/3FDCkiCVzAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# sum of squared distances\n",
    "ssd = []\n",
    "for num_clusters in list(range(1,21)):\n",
    "    model_clus = KMeans(n_clusters = num_clusters, max_iter=50)\n",
    "    model_clus.fit(RFM_norm1)\n",
    "    ssd.append(model_clus.inertia_)\n",
    "\n",
    "plt.plot(ssd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# analysis of clusters formed\n",
    "RFM.index = pd.RangeIndex(len(RFM.index))\n",
    "RFM_km = pd.concat([RFM, pd.Series(model_clus5.labels_)], axis=1)\n",
    "RFM_km.columns = ['CustomerID', 'Frequency', 'Amount', 'Recency', 'ClusterID']\n",
    "\n",
    "RFM_km.Recency = RFM_km.Recency.dt.days\n",
    "km_clusters_amount = \tpd.DataFrame(RFM_km.groupby([\"ClusterID\"]).Amount.mean())\n",
    "km_clusters_frequency = \tpd.DataFrame(RFM_km.groupby([\"ClusterID\"]).Frequency.mean())\n",
    "km_clusters_recency = \tpd.DataFrame(RFM_km.groupby([\"ClusterID\"]).Recency.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ClusterID</th>\n",
       "      <th>Amount_mean</th>\n",
       "      <th>Frequency_mean</th>\n",
       "      <th>Recency_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>327.037096</td>\n",
       "      <td>20.558856</td>\n",
       "      <td>262.393839</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1202.032209</td>\n",
       "      <td>53.695906</td>\n",
       "      <td>50.168129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>912.557139</td>\n",
       "      <td>114.021798</td>\n",
       "      <td>53.980926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2471.402482</td>\n",
       "      <td>117.888283</td>\n",
       "      <td>38.198910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>357.919301</td>\n",
       "      <td>23.334307</td>\n",
       "      <td>57.543066</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ClusterID  Amount_mean  Frequency_mean  Recency_mean\n",
       "0          0   327.037096       20.558856    262.393839\n",
       "1          1  1202.032209       53.695906     50.168129\n",
       "2          2   912.557139      114.021798     53.980926\n",
       "3          3  2471.402482      117.888283     38.198910\n",
       "4          4   357.919301       23.334307     57.543066"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.concat([pd.Series([0,1,2,3,4]), km_clusters_amount, km_clusters_frequency, km_clusters_recency], axis=1)\n",
    "df.columns = [\"ClusterID\", \"Amount_mean\", \"Frequency_mean\", \"Recency_mean\"]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f9ba2f706a0>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df.ClusterID, y=df.Amount_mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f9ba2e83320>"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df.ClusterID, y=df.Frequency_mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f9ba2e0bba8>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df.ClusterID, y=df.Recency_mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# heirarchical clustering\n",
    "mergings = linkage(RFM_norm1, method = \"single\", metric='euclidean')\n",
    "dendrogram(mergings)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mergings = linkage(RFM_norm1, method = \"complete\", metric='euclidean')\n",
    "dendrogram(mergings)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "clusterCut = pd.Series(cut_tree(mergings, n_clusters = 5).reshape(-1,))\n",
    "RFM_hc = pd.concat([RFM, clusterCut], axis=1)\n",
    "RFM_hc.columns = ['CustomerID', 'Frequency', 'Amount', 'Recency', 'ClusterID']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "#summarise\n",
    "RFM_hc.Recency = RFM_hc.Recency.dt.days\n",
    "km_clusters_amount = \tpd.DataFrame(RFM_hc.groupby([\"ClusterID\"]).Amount.mean())\n",
    "km_clusters_frequency = \tpd.DataFrame(RFM_hc.groupby([\"ClusterID\"]).Frequency.mean())\n",
    "km_clusters_recency = \tpd.DataFrame(RFM_hc.groupby([\"ClusterID\"]).Recency.mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ClusterID</th>\n",
       "      <th>Amount_mean</th>\n",
       "      <th>Frequency_mean</th>\n",
       "      <th>Recency_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>401.831170</td>\n",
       "      <td>23.929069</td>\n",
       "      <td>131.066011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1787.153319</td>\n",
       "      <td>44.943966</td>\n",
       "      <td>38.547414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2324.569366</td>\n",
       "      <td>122.145889</td>\n",
       "      <td>34.856764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>915.359751</td>\n",
       "      <td>89.739875</td>\n",
       "      <td>65.752336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>-997.147143</td>\n",
       "      <td>6.142857</td>\n",
       "      <td>218.285714</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ClusterID  Amount_mean  Frequency_mean  Recency_mean\n",
       "0          0   401.831170       23.929069    131.066011\n",
       "1          1  1787.153319       44.943966     38.547414\n",
       "2          2  2324.569366      122.145889     34.856764\n",
       "3          3   915.359751       89.739875     65.752336\n",
       "4          4  -997.147143        6.142857    218.285714"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.concat([pd.Series([0,1,2,3,4]), km_clusters_amount, km_clusters_frequency, km_clusters_recency], axis=1)\n",
    "df.columns = [\"ClusterID\", \"Amount_mean\", \"Frequency_mean\", \"Recency_mean\"]\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f9b9d1f1a90>"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plotting barplot\n",
    "sns.barplot(x=df.ClusterID, y=df.Amount_mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f9ba2d6a4e0>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df.ClusterID, y=df.Frequency_mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f9ba288ea90>"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x=df.ClusterID, y=df.Recency_mean)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
